// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/launchdarkly/ldcli/internal/dev_server/model (interfaces: Observer)
//
// Generated by this command:
//
//	mockgen -destination mocks/observer.go -package mocks . Observer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockObserver is a mock of Observer interface.
type MockObserver struct {
	ctrl     *gomock.Controller
	recorder *MockObserverMockRecorder
}

// MockObserverMockRecorder is the mock recorder for MockObserver.
type MockObserverMockRecorder struct {
	mock *MockObserver
}

// NewMockObserver creates a new mock instance.
func NewMockObserver(ctrl *gomock.Controller) *MockObserver {
	mock := &MockObserver{ctrl: ctrl}
	mock.recorder = &MockObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObserver) EXPECT() *MockObserverMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockObserver) Handle(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", arg0)
}

// Handle indicates an expected call of Handle.
func (mr *MockObserverMockRecorder) Handle(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockObserver)(nil).Handle), arg0)
}
