// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/launchdarkly/ldcli/internal/dev_server/model (interfaces: EventStore)
//
// Generated by this command:
//
//	mockgen -destination mocks/event_store.go -package mocks . EventStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	json "encoding/json"
	reflect "reflect"

	model "github.com/launchdarkly/ldcli/internal/dev_server/model"
	gomock "go.uber.org/mock/gomock"
)

// MockEventStore is a mock of EventStore interface.
type MockEventStore struct {
	ctrl     *gomock.Controller
	recorder *MockEventStoreMockRecorder
	isgomock struct{}
}

// MockEventStoreMockRecorder is the mock recorder for MockEventStore.
type MockEventStoreMockRecorder struct {
	mock *MockEventStore
}

// NewMockEventStore creates a new mock instance.
func NewMockEventStore(ctrl *gomock.Controller) *MockEventStore {
	mock := &MockEventStore{ctrl: ctrl}
	mock.recorder = &MockEventStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStore) EXPECT() *MockEventStoreMockRecorder {
	return m.recorder
}

// CreateDebugSession mocks base method.
func (m *MockEventStore) CreateDebugSession(ctx context.Context, debugSessionKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDebugSession", ctx, debugSessionKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDebugSession indicates an expected call of CreateDebugSession.
func (mr *MockEventStoreMockRecorder) CreateDebugSession(ctx, debugSessionKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDebugSession", reflect.TypeOf((*MockEventStore)(nil).CreateDebugSession), ctx, debugSessionKey)
}

// DeleteDebugSession mocks base method.
func (m *MockEventStore) DeleteDebugSession(ctx context.Context, debugSessionKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDebugSession", ctx, debugSessionKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDebugSession indicates an expected call of DeleteDebugSession.
func (mr *MockEventStoreMockRecorder) DeleteDebugSession(ctx, debugSessionKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDebugSession", reflect.TypeOf((*MockEventStore)(nil).DeleteDebugSession), ctx, debugSessionKey)
}

// QueryDebugSessions mocks base method.
func (m *MockEventStore) QueryDebugSessions(ctx context.Context, limit, offset int) (*model.DebugSessionsPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDebugSessions", ctx, limit, offset)
	ret0, _ := ret[0].(*model.DebugSessionsPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDebugSessions indicates an expected call of QueryDebugSessions.
func (mr *MockEventStoreMockRecorder) QueryDebugSessions(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDebugSessions", reflect.TypeOf((*MockEventStore)(nil).QueryDebugSessions), ctx, limit, offset)
}

// QueryEvents mocks base method.
func (m *MockEventStore) QueryEvents(ctx context.Context, debugSessionKey string, kind *string, limit, offset int) (*model.EventsPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryEvents", ctx, debugSessionKey, kind, limit, offset)
	ret0, _ := ret[0].(*model.EventsPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryEvents indicates an expected call of QueryEvents.
func (mr *MockEventStoreMockRecorder) QueryEvents(ctx, debugSessionKey, kind, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryEvents", reflect.TypeOf((*MockEventStore)(nil).QueryEvents), ctx, debugSessionKey, kind, limit, offset)
}

// WriteEvent mocks base method.
func (m *MockEventStore) WriteEvent(ctx context.Context, debugSessionKey, kind string, data json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteEvent", ctx, debugSessionKey, kind, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteEvent indicates an expected call of WriteEvent.
func (mr *MockEventStoreMockRecorder) WriteEvent(ctx, debugSessionKey, kind, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteEvent", reflect.TypeOf((*MockEventStore)(nil).WriteEvent), ctx, debugSessionKey, kind, data)
}
