// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/launchdarkly/ldcli/internal/dev_server/adapters/internal (interfaces: MockableTime)
//
// Generated by this command:
//
//	mockgen -destination mocks.go -package internal . MockableTime
//

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockMockableTime is a mock of MockableTime interface.
type MockMockableTime struct {
	ctrl     *gomock.Controller
	recorder *MockMockableTimeMockRecorder
}

// MockMockableTimeMockRecorder is the mock recorder for MockMockableTime.
type MockMockableTimeMockRecorder struct {
	mock *MockMockableTime
}

// NewMockMockableTime creates a new mock instance.
func NewMockMockableTime(ctrl *gomock.Controller) *MockMockableTime {
	mock := &MockMockableTime{ctrl: ctrl}
	mock.recorder = &MockMockableTimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMockableTime) EXPECT() *MockMockableTimeMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockMockableTime) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockMockableTimeMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockMockableTime)(nil).Now))
}

// Sleep mocks base method.
func (m *MockMockableTime) Sleep(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sleep", arg0)
}

// Sleep indicates an expected call of Sleep.
func (mr *MockMockableTimeMockRecorder) Sleep(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sleep", reflect.TypeOf((*MockMockableTime)(nil).Sleep), arg0)
}
