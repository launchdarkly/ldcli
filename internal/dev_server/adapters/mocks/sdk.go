// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/launchdarkly/ldcli/internal/dev_server/adapters (interfaces: Sdk)
//
// Generated by this command:
//
//	mockgen -destination mocks/sdk.go -package mocks . Sdk
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ldcontext "github.com/launchdarkly/go-sdk-common/v3/ldcontext"
	flagstate "github.com/launchdarkly/go-server-sdk/v7/interfaces/flagstate"
	gomock "go.uber.org/mock/gomock"
)

// MockSdk is a mock of Sdk interface.
type MockSdk struct {
	ctrl     *gomock.Controller
	recorder *MockSdkMockRecorder
}

// MockSdkMockRecorder is the mock recorder for MockSdk.
type MockSdkMockRecorder struct {
	mock *MockSdk
}

// NewMockSdk creates a new mock instance.
func NewMockSdk(ctrl *gomock.Controller) *MockSdk {
	mock := &MockSdk{ctrl: ctrl}
	mock.recorder = &MockSdkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSdk) EXPECT() *MockSdkMockRecorder {
	return m.recorder
}

// GetAllFlagsState mocks base method.
func (m *MockSdk) GetAllFlagsState(arg0 context.Context, arg1 ldcontext.Context, arg2 string) (flagstate.AllFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFlagsState", arg0, arg1, arg2)
	ret0, _ := ret[0].(flagstate.AllFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFlagsState indicates an expected call of GetAllFlagsState.
func (mr *MockSdkMockRecorder) GetAllFlagsState(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFlagsState", reflect.TypeOf((*MockSdk)(nil).GetAllFlagsState), arg0, arg1, arg2)
}
