// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/launchdarkly/go-sdk-common/v3/ldcontext"
	"github.com/launchdarkly/go-sdk-common/v3/ldvalue"
	"github.com/launchdarkly/ldcli/internal/dev_server/model"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for GetProjectParamsExpand.
const (
	GetProjectParamsExpandAvailableVariations GetProjectParamsExpand = "availableVariations"
	GetProjectParamsExpandOverrides           GetProjectParamsExpand = "overrides"
)

// Defines values for PatchProjectParamsExpand.
const (
	PatchProjectParamsExpandAvailableVariations PatchProjectParamsExpand = "availableVariations"
	PatchProjectParamsExpandOverrides           PatchProjectParamsExpand = "overrides"
)

// Defines values for PostAddProjectParamsExpand.
const (
	PostAddProjectParamsExpandAvailableVariations PostAddProjectParamsExpand = "availableVariations"
	PostAddProjectParamsExpandOverrides           PostAddProjectParamsExpand = "overrides"
)

// Defines values for PatchSyncProjectParamsExpand.
const (
	PatchSyncProjectParamsExpandAvailableVariations PatchSyncProjectParamsExpand = "availableVariations"
	PatchSyncProjectParamsExpandOverrides           PatchSyncProjectParamsExpand = "overrides"
)

// Context context object to use when evaluating flags in source environment
type Context = ldcontext.Context

// Environment Environment
type Environment struct {
	Key  string `json:"key"`
	Name string `json:"name"`
}

// FlagValue value of a feature flag variation
type FlagValue = ldvalue.Value

// Project Project
type Project struct {
	// LastSyncedFromSource unix timestamp for the lat time the flag values were synced from the source environment
	LastSyncedFromSource int64 `json:"_lastSyncedFromSource"`

	// AvailableVariations variations
	AvailableVariations *map[string][]Variation `json:"availableVariations,omitempty"`

	// Context context object to use when evaluating flags in source environment
	Context Context `json:"context"`

	// FlagsState flags and their values and version for a given project in the source environment
	FlagsState *model.FlagsState `json:"flagsState,omitempty"`

	// Overrides overridden flags for the project
	Overrides *model.FlagsState `json:"overrides,omitempty"`

	// SourceEnvironmentKey environment to copy flag values from
	SourceEnvironmentKey string `json:"sourceEnvironmentKey"`
}

// Variation variation of a flag
type Variation struct {
	Id          string  `json:"_id"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`

	// Value value of a feature flag variation
	Value FlagValue `json:"value"`
}

// FlagKey defines model for flagKey.
type FlagKey = string

// ProjectExpand defines model for projectExpand.
type ProjectExpand = []string

// ProjectKey defines model for projectKey.
type ProjectKey = string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code specific error code encountered
	Code string `json:"code"`

	// Message description of the error
	Message string `json:"message"`
}

// FlagOverride defines model for FlagOverride.
type FlagOverride struct {
	// Override whether or not this is an overridden value or one from the source environment
	Override bool `json:"override"`

	// Value value of a feature flag variation
	Value FlagValue `json:"value"`
}

// GetProjectParams defines parameters for GetProject.
type GetProjectParams struct {
	// Expand Available expand options for this endpoint.
	Expand *ProjectExpand `form:"expand,omitempty" json:"expand,omitempty"`
}

// GetProjectParamsExpand defines parameters for GetProject.
type GetProjectParamsExpand string

// PatchProjectJSONBody defines parameters for PatchProject.
type PatchProjectJSONBody struct {
	// Context context object to use when evaluating flags in source environment
	Context *Context `json:"context,omitempty"`

	// SourceEnvironmentKey environment to copy flag values from
	SourceEnvironmentKey *string `json:"sourceEnvironmentKey,omitempty"`
}

// PatchProjectParams defines parameters for PatchProject.
type PatchProjectParams struct {
	// Expand Available expand options for this endpoint.
	Expand *ProjectExpand `form:"expand,omitempty" json:"expand,omitempty"`
}

// PatchProjectParamsExpand defines parameters for PatchProject.
type PatchProjectParamsExpand string

// PostAddProjectJSONBody defines parameters for PostAddProject.
type PostAddProjectJSONBody struct {
	// Context context object to use when evaluating flags in source environment
	Context *Context `json:"context,omitempty"`

	// SourceEnvironmentKey environment to copy flag values from
	SourceEnvironmentKey string `json:"sourceEnvironmentKey"`
}

// PostAddProjectParams defines parameters for PostAddProject.
type PostAddProjectParams struct {
	// Expand Available expand options for this endpoint.
	Expand *ProjectExpand `form:"expand,omitempty" json:"expand,omitempty"`
}

// PostAddProjectParamsExpand defines parameters for PostAddProject.
type PostAddProjectParamsExpand string

// PatchSyncProjectParams defines parameters for PatchSyncProject.
type PatchSyncProjectParams struct {
	// Expand Available expand options for this endpoint.
	Expand *ProjectExpand `form:"expand,omitempty" json:"expand,omitempty"`
}

// PatchSyncProjectParamsExpand defines parameters for PatchSyncProject.
type PatchSyncProjectParamsExpand string

// PatchProjectJSONRequestBody defines body for PatchProject for application/json ContentType.
type PatchProjectJSONRequestBody PatchProjectJSONBody

// PostAddProjectJSONRequestBody defines body for PostAddProject for application/json ContentType.
type PostAddProjectJSONRequestBody PostAddProjectJSONBody

// PutOverrideFlagJSONRequestBody defines body for PutOverrideFlag for application/json ContentType.
type PutOverrideFlagJSONRequestBody = FlagValue

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// lists all projects that have been configured for the dev server
	// (GET /dev/projects)
	GetProjects(w http.ResponseWriter, r *http.Request)
	// remove the specified project from the dev server
	// (DELETE /dev/projects/{projectKey})
	DeleteProject(w http.ResponseWriter, r *http.Request, projectKey ProjectKey)
	// get the specified project and its configuration for syncing from the LaunchDarkly Service
	// (GET /dev/projects/{projectKey})
	GetProject(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, params GetProjectParams)
	// updates the project context or sourceEnvironmentKey
	// (PATCH /dev/projects/{projectKey})
	PatchProject(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, params PatchProjectParams)
	// Add the project to the dev server
	// (POST /dev/projects/{projectKey})
	PostAddProject(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, params PostAddProjectParams)
	// list all environments for the given project
	// (GET /dev/projects/{projectKey}/environments)
	GetEnvironments(w http.ResponseWriter, r *http.Request, projectKey ProjectKey)
	// remove override for flag
	// (DELETE /dev/projects/{projectKey}/overrides/{flagKey})
	DeleteFlagOverride(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, flagKey FlagKey)
	// override flag value with value provided in the body
	// (PUT /dev/projects/{projectKey}/overrides/{flagKey})
	PutOverrideFlag(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, flagKey FlagKey)
	// updates the flag state for the given project and source environment
	// (PATCH /dev/projects/{projectKey}/sync)
	PatchSyncProject(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, params PatchSyncProjectParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectKey" -------------
	var projectKey ProjectKey

	err = runtime.BindStyledParameterWithOptions("simple", "projectKey", mux.Vars(r)["projectKey"], &projectKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProject(w, r, projectKey)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectKey" -------------
	var projectKey ProjectKey

	err = runtime.BindStyledParameterWithOptions("simple", "projectKey", mux.Vars(r)["projectKey"], &projectKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectParams

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProject(w, r, projectKey, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchProject operation middleware
func (siw *ServerInterfaceWrapper) PatchProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectKey" -------------
	var projectKey ProjectKey

	err = runtime.BindStyledParameterWithOptions("simple", "projectKey", mux.Vars(r)["projectKey"], &projectKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchProjectParams

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchProject(w, r, projectKey, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAddProject operation middleware
func (siw *ServerInterfaceWrapper) PostAddProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectKey" -------------
	var projectKey ProjectKey

	err = runtime.BindStyledParameterWithOptions("simple", "projectKey", mux.Vars(r)["projectKey"], &projectKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAddProjectParams

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAddProject(w, r, projectKey, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEnvironments operation middleware
func (siw *ServerInterfaceWrapper) GetEnvironments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectKey" -------------
	var projectKey ProjectKey

	err = runtime.BindStyledParameterWithOptions("simple", "projectKey", mux.Vars(r)["projectKey"], &projectKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEnvironments(w, r, projectKey)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFlagOverride operation middleware
func (siw *ServerInterfaceWrapper) DeleteFlagOverride(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectKey" -------------
	var projectKey ProjectKey

	err = runtime.BindStyledParameterWithOptions("simple", "projectKey", mux.Vars(r)["projectKey"], &projectKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectKey", Err: err})
		return
	}

	// ------------- Path parameter "flagKey" -------------
	var flagKey FlagKey

	err = runtime.BindStyledParameterWithOptions("simple", "flagKey", mux.Vars(r)["flagKey"], &flagKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flagKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFlagOverride(w, r, projectKey, flagKey)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutOverrideFlag operation middleware
func (siw *ServerInterfaceWrapper) PutOverrideFlag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectKey" -------------
	var projectKey ProjectKey

	err = runtime.BindStyledParameterWithOptions("simple", "projectKey", mux.Vars(r)["projectKey"], &projectKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectKey", Err: err})
		return
	}

	// ------------- Path parameter "flagKey" -------------
	var flagKey FlagKey

	err = runtime.BindStyledParameterWithOptions("simple", "flagKey", mux.Vars(r)["flagKey"], &flagKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flagKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutOverrideFlag(w, r, projectKey, flagKey)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchSyncProject operation middleware
func (siw *ServerInterfaceWrapper) PatchSyncProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectKey" -------------
	var projectKey ProjectKey

	err = runtime.BindStyledParameterWithOptions("simple", "projectKey", mux.Vars(r)["projectKey"], &projectKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchSyncProjectParams

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchSyncProject(w, r, projectKey, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/dev/projects", wrapper.GetProjects).Methods("GET")

	r.HandleFunc(options.BaseURL+"/dev/projects/{projectKey}", wrapper.DeleteProject).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/dev/projects/{projectKey}", wrapper.GetProject).Methods("GET")

	r.HandleFunc(options.BaseURL+"/dev/projects/{projectKey}", wrapper.PatchProject).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/dev/projects/{projectKey}", wrapper.PostAddProject).Methods("POST")

	r.HandleFunc(options.BaseURL+"/dev/projects/{projectKey}/environments", wrapper.GetEnvironments).Methods("GET")

	r.HandleFunc(options.BaseURL+"/dev/projects/{projectKey}/overrides/{flagKey}", wrapper.DeleteFlagOverride).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/dev/projects/{projectKey}/overrides/{flagKey}", wrapper.PutOverrideFlag).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/dev/projects/{projectKey}/sync", wrapper.PatchSyncProject).Methods("PATCH")

	return r
}

type ErrorResponseJSONResponse struct {
	// Code specific error code encountered
	Code string `json:"code"`

	// Message description of the error
	Message string `json:"message"`
}

type FlagOverrideJSONResponse struct {
	// Override whether or not this is an overridden value or one from the source environment
	Override bool `json:"override"`

	// Value value of a feature flag variation
	Value FlagValue `json:"value"`
}

type ProjectJSONResponse Project

type GetProjectsRequestObject struct {
}

type GetProjectsResponseObject interface {
	VisitGetProjectsResponse(w http.ResponseWriter) error
}

type GetProjects200JSONResponse []string

func (response GetProjects200JSONResponse) VisitGetProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRequestObject struct {
	ProjectKey ProjectKey `json:"projectKey"`
}

type DeleteProjectResponseObject interface {
	VisitDeleteProjectResponse(w http.ResponseWriter) error
}

type DeleteProject204Response struct {
}

func (response DeleteProject204Response) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteProject404JSONResponse struct{ ErrorResponseJSONResponse }

func (response DeleteProject404JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectRequestObject struct {
	ProjectKey ProjectKey `json:"projectKey"`
	Params     GetProjectParams
}

type GetProjectResponseObject interface {
	VisitGetProjectResponse(w http.ResponseWriter) error
}

type GetProject200JSONResponse struct{ ProjectJSONResponse }

func (response GetProject200JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProject404Response struct {
}

func (response GetProject404Response) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PatchProjectRequestObject struct {
	ProjectKey ProjectKey `json:"projectKey"`
	Params     PatchProjectParams
	Body       *PatchProjectJSONRequestBody
}

type PatchProjectResponseObject interface {
	VisitPatchProjectResponse(w http.ResponseWriter) error
}

type PatchProject200JSONResponse struct{ ProjectJSONResponse }

func (response PatchProject200JSONResponse) VisitPatchProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchProject404Response struct {
}

func (response PatchProject404Response) VisitPatchProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostAddProjectRequestObject struct {
	ProjectKey ProjectKey `json:"projectKey"`
	Params     PostAddProjectParams
	Body       *PostAddProjectJSONRequestBody
}

type PostAddProjectResponseObject interface {
	VisitPostAddProjectResponse(w http.ResponseWriter) error
}

type PostAddProject201JSONResponse struct{ ProjectJSONResponse }

func (response PostAddProject201JSONResponse) VisitPostAddProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostAddProject400JSONResponse struct{ ErrorResponseJSONResponse }

func (response PostAddProject400JSONResponse) VisitPostAddProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAddProject409JSONResponse struct {
	// Code specific error code encountered
	Code string `json:"code"`

	// Message description of the error
	Message string `json:"message"`
}

func (response PostAddProject409JSONResponse) VisitPostAddProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetEnvironmentsRequestObject struct {
	ProjectKey ProjectKey `json:"projectKey"`
}

type GetEnvironmentsResponseObject interface {
	VisitGetEnvironmentsResponse(w http.ResponseWriter) error
}

type GetEnvironments200JSONResponse []Environment

func (response GetEnvironments200JSONResponse) VisitGetEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnvironments400JSONResponse struct{ ErrorResponseJSONResponse }

func (response GetEnvironments400JSONResponse) VisitGetEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetEnvironments404JSONResponse struct {
	// Code specific error code encountered
	Code string `json:"code"`

	// Message description of the error
	Message string `json:"message"`
}

func (response GetEnvironments404JSONResponse) VisitGetEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFlagOverrideRequestObject struct {
	ProjectKey ProjectKey `json:"projectKey"`
	FlagKey    FlagKey    `json:"flagKey"`
}

type DeleteFlagOverrideResponseObject interface {
	VisitDeleteFlagOverrideResponse(w http.ResponseWriter) error
}

type DeleteFlagOverride204Response struct {
}

func (response DeleteFlagOverride204Response) VisitDeleteFlagOverrideResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteFlagOverride404Response struct {
}

func (response DeleteFlagOverride404Response) VisitDeleteFlagOverrideResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PutOverrideFlagRequestObject struct {
	ProjectKey ProjectKey `json:"projectKey"`
	FlagKey    FlagKey    `json:"flagKey"`
	Body       *PutOverrideFlagJSONRequestBody
}

type PutOverrideFlagResponseObject interface {
	VisitPutOverrideFlagResponse(w http.ResponseWriter) error
}

type PutOverrideFlag200JSONResponse struct{ FlagOverrideJSONResponse }

func (response PutOverrideFlag200JSONResponse) VisitPutOverrideFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutOverrideFlag400JSONResponse struct{ ErrorResponseJSONResponse }

func (response PutOverrideFlag400JSONResponse) VisitPutOverrideFlagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchSyncProjectRequestObject struct {
	ProjectKey ProjectKey `json:"projectKey"`
	Params     PatchSyncProjectParams
}

type PatchSyncProjectResponseObject interface {
	VisitPatchSyncProjectResponse(w http.ResponseWriter) error
}

type PatchSyncProject200JSONResponse struct{ ProjectJSONResponse }

func (response PatchSyncProject200JSONResponse) VisitPatchSyncProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchSyncProject404Response struct {
}

func (response PatchSyncProject404Response) VisitPatchSyncProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// lists all projects that have been configured for the dev server
	// (GET /dev/projects)
	GetProjects(ctx context.Context, request GetProjectsRequestObject) (GetProjectsResponseObject, error)
	// remove the specified project from the dev server
	// (DELETE /dev/projects/{projectKey})
	DeleteProject(ctx context.Context, request DeleteProjectRequestObject) (DeleteProjectResponseObject, error)
	// get the specified project and its configuration for syncing from the LaunchDarkly Service
	// (GET /dev/projects/{projectKey})
	GetProject(ctx context.Context, request GetProjectRequestObject) (GetProjectResponseObject, error)
	// updates the project context or sourceEnvironmentKey
	// (PATCH /dev/projects/{projectKey})
	PatchProject(ctx context.Context, request PatchProjectRequestObject) (PatchProjectResponseObject, error)
	// Add the project to the dev server
	// (POST /dev/projects/{projectKey})
	PostAddProject(ctx context.Context, request PostAddProjectRequestObject) (PostAddProjectResponseObject, error)
	// list all environments for the given project
	// (GET /dev/projects/{projectKey}/environments)
	GetEnvironments(ctx context.Context, request GetEnvironmentsRequestObject) (GetEnvironmentsResponseObject, error)
	// remove override for flag
	// (DELETE /dev/projects/{projectKey}/overrides/{flagKey})
	DeleteFlagOverride(ctx context.Context, request DeleteFlagOverrideRequestObject) (DeleteFlagOverrideResponseObject, error)
	// override flag value with value provided in the body
	// (PUT /dev/projects/{projectKey}/overrides/{flagKey})
	PutOverrideFlag(ctx context.Context, request PutOverrideFlagRequestObject) (PutOverrideFlagResponseObject, error)
	// updates the flag state for the given project and source environment
	// (PATCH /dev/projects/{projectKey}/sync)
	PatchSyncProject(ctx context.Context, request PatchSyncProjectRequestObject) (PatchSyncProjectResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetProjects operation middleware
func (sh *strictHandler) GetProjects(w http.ResponseWriter, r *http.Request) {
	var request GetProjectsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjects(ctx, request.(GetProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjects")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectsResponseObject); ok {
		if err := validResponse.VisitGetProjectsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProject operation middleware
func (sh *strictHandler) DeleteProject(w http.ResponseWriter, r *http.Request, projectKey ProjectKey) {
	var request DeleteProjectRequestObject

	request.ProjectKey = projectKey

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProject(ctx, request.(DeleteProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectResponseObject); ok {
		if err := validResponse.VisitDeleteProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProject operation middleware
func (sh *strictHandler) GetProject(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, params GetProjectParams) {
	var request GetProjectRequestObject

	request.ProjectKey = projectKey
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProject(ctx, request.(GetProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectResponseObject); ok {
		if err := validResponse.VisitGetProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchProject operation middleware
func (sh *strictHandler) PatchProject(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, params PatchProjectParams) {
	var request PatchProjectRequestObject

	request.ProjectKey = projectKey
	request.Params = params

	var body PatchProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchProject(ctx, request.(PatchProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchProjectResponseObject); ok {
		if err := validResponse.VisitPatchProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAddProject operation middleware
func (sh *strictHandler) PostAddProject(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, params PostAddProjectParams) {
	var request PostAddProjectRequestObject

	request.ProjectKey = projectKey
	request.Params = params

	var body PostAddProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAddProject(ctx, request.(PostAddProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAddProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAddProjectResponseObject); ok {
		if err := validResponse.VisitPostAddProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEnvironments operation middleware
func (sh *strictHandler) GetEnvironments(w http.ResponseWriter, r *http.Request, projectKey ProjectKey) {
	var request GetEnvironmentsRequestObject

	request.ProjectKey = projectKey

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnvironments(ctx, request.(GetEnvironmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnvironments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEnvironmentsResponseObject); ok {
		if err := validResponse.VisitGetEnvironmentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFlagOverride operation middleware
func (sh *strictHandler) DeleteFlagOverride(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, flagKey FlagKey) {
	var request DeleteFlagOverrideRequestObject

	request.ProjectKey = projectKey
	request.FlagKey = flagKey

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFlagOverride(ctx, request.(DeleteFlagOverrideRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFlagOverride")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFlagOverrideResponseObject); ok {
		if err := validResponse.VisitDeleteFlagOverrideResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutOverrideFlag operation middleware
func (sh *strictHandler) PutOverrideFlag(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, flagKey FlagKey) {
	var request PutOverrideFlagRequestObject

	request.ProjectKey = projectKey
	request.FlagKey = flagKey

	var body PutOverrideFlagJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutOverrideFlag(ctx, request.(PutOverrideFlagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutOverrideFlag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutOverrideFlagResponseObject); ok {
		if err := validResponse.VisitPutOverrideFlagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchSyncProject operation middleware
func (sh *strictHandler) PatchSyncProject(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, params PatchSyncProjectParams) {
	var request PatchSyncProjectRequestObject

	request.ProjectKey = projectKey
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchSyncProject(ctx, request.(PatchSyncProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchSyncProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchSyncProjectResponseObject); ok {
		if err := validResponse.VisitPatchSyncProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
