// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/launchdarkly/go-sdk-common/v3/ldcontext"
	"github.com/launchdarkly/go-sdk-common/v3/ldvalue"
	"github.com/launchdarkly/ldcli/internal/dev_server/model"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for GetDevProjectsProjectKeyParamsExpand.
const (
	GetDevProjectsProjectKeyParamsExpandAvailableVariations GetDevProjectsProjectKeyParamsExpand = "availableVariations"
	GetDevProjectsProjectKeyParamsExpandOverrides           GetDevProjectsProjectKeyParamsExpand = "overrides"
)

// Defines values for PatchDevProjectsProjectKeyParamsExpand.
const (
	PatchDevProjectsProjectKeyParamsExpandAvailableVariations PatchDevProjectsProjectKeyParamsExpand = "availableVariations"
	PatchDevProjectsProjectKeyParamsExpandOverrides           PatchDevProjectsProjectKeyParamsExpand = "overrides"
)

// Defines values for PostDevProjectsProjectKeyParamsExpand.
const (
	PostDevProjectsProjectKeyParamsExpandAvailableVariations PostDevProjectsProjectKeyParamsExpand = "availableVariations"
	PostDevProjectsProjectKeyParamsExpandOverrides           PostDevProjectsProjectKeyParamsExpand = "overrides"
)

// Defines values for PatchDevProjectsProjectKeySyncParamsExpand.
const (
	PatchDevProjectsProjectKeySyncParamsExpandAvailableVariations PatchDevProjectsProjectKeySyncParamsExpand = "availableVariations"
	PatchDevProjectsProjectKeySyncParamsExpandOverrides           PatchDevProjectsProjectKeySyncParamsExpand = "overrides"
)

// Context context object to use when evaluating flags in source environment
type Context = ldcontext.Context

// FlagValue value of a feature flag variation
type FlagValue = ldvalue.Value

// Project Project
type Project struct {
	// LastSyncedFromSource unix timestamp for the lat time the flag values were synced from the source environment
	LastSyncedFromSource int64 `json:"_lastSyncedFromSource"`

	// AvailableVariations variations
	AvailableVariations *map[string][]Variation `json:"availableVariations,omitempty"`

	// Context context object to use when evaluating flags in source environment
	Context Context `json:"context"`

	// FlagsState flags and their values and version for a given project in the source environment
	FlagsState *model.FlagsState `json:"flagsState,omitempty"`

	// Overrides overridden flags for the project
	Overrides *model.FlagsState `json:"overrides,omitempty"`

	// SourceEnvironmentKey environment to copy flag values from
	SourceEnvironmentKey string `json:"sourceEnvironmentKey"`
}

// Variation variation of a flag
type Variation struct {
	Id          string  `json:"_id"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`

	// Value value of a feature flag variation
	Value FlagValue `json:"value"`
}

// FlagKey defines model for flagKey.
type FlagKey = string

// ProjectExpand defines model for projectExpand.
type ProjectExpand = []string

// ProjectKey defines model for projectKey.
type ProjectKey = string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code specific error code encountered
	Code string `json:"code"`

	// Message description of the error
	Message string `json:"message"`
}

// FlagOverride defines model for FlagOverride.
type FlagOverride struct {
	// Override whether or not this is an overridden value or one from the source environment
	Override bool `json:"override"`

	// Value value of a feature flag variation
	Value FlagValue `json:"value"`
}

// GetDevProjectsProjectKeyParams defines parameters for GetDevProjectsProjectKey.
type GetDevProjectsProjectKeyParams struct {
	// Expand Available expand options for this endpoint.
	Expand *ProjectExpand `form:"expand,omitempty" json:"expand,omitempty"`
}

// GetDevProjectsProjectKeyParamsExpand defines parameters for GetDevProjectsProjectKey.
type GetDevProjectsProjectKeyParamsExpand string

// PatchDevProjectsProjectKeyJSONBody defines parameters for PatchDevProjectsProjectKey.
type PatchDevProjectsProjectKeyJSONBody struct {
	// Context context object to use when evaluating flags in source environment
	Context *Context `json:"context,omitempty"`

	// SourceEnvironmentKey environment to copy flag values from
	SourceEnvironmentKey *string `json:"sourceEnvironmentKey,omitempty"`
}

// PatchDevProjectsProjectKeyParams defines parameters for PatchDevProjectsProjectKey.
type PatchDevProjectsProjectKeyParams struct {
	// Expand Available expand options for this endpoint.
	Expand *ProjectExpand `form:"expand,omitempty" json:"expand,omitempty"`
}

// PatchDevProjectsProjectKeyParamsExpand defines parameters for PatchDevProjectsProjectKey.
type PatchDevProjectsProjectKeyParamsExpand string

// PostDevProjectsProjectKeyJSONBody defines parameters for PostDevProjectsProjectKey.
type PostDevProjectsProjectKeyJSONBody struct {
	// Context context object to use when evaluating flags in source environment
	Context *Context `json:"context,omitempty"`

	// SourceEnvironmentKey environment to copy flag values from
	SourceEnvironmentKey string `json:"sourceEnvironmentKey"`
}

// PostDevProjectsProjectKeyParams defines parameters for PostDevProjectsProjectKey.
type PostDevProjectsProjectKeyParams struct {
	// Expand Available expand options for this endpoint.
	Expand *ProjectExpand `form:"expand,omitempty" json:"expand,omitempty"`
}

// PostDevProjectsProjectKeyParamsExpand defines parameters for PostDevProjectsProjectKey.
type PostDevProjectsProjectKeyParamsExpand string

// PatchDevProjectsProjectKeySyncParams defines parameters for PatchDevProjectsProjectKeySync.
type PatchDevProjectsProjectKeySyncParams struct {
	// Expand Available expand options for this endpoint.
	Expand *ProjectExpand `form:"expand,omitempty" json:"expand,omitempty"`
}

// PatchDevProjectsProjectKeySyncParamsExpand defines parameters for PatchDevProjectsProjectKeySync.
type PatchDevProjectsProjectKeySyncParamsExpand string

// PatchDevProjectsProjectKeyJSONRequestBody defines body for PatchDevProjectsProjectKey for application/json ContentType.
type PatchDevProjectsProjectKeyJSONRequestBody PatchDevProjectsProjectKeyJSONBody

// PostDevProjectsProjectKeyJSONRequestBody defines body for PostDevProjectsProjectKey for application/json ContentType.
type PostDevProjectsProjectKeyJSONRequestBody PostDevProjectsProjectKeyJSONBody

// PutDevProjectsProjectKeyOverridesFlagKeyJSONRequestBody defines body for PutDevProjectsProjectKeyOverridesFlagKey for application/json ContentType.
type PutDevProjectsProjectKeyOverridesFlagKeyJSONRequestBody = FlagValue

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// lists all projects that have been configured for the dev server
	// (GET /dev/projects)
	GetDevProjects(w http.ResponseWriter, r *http.Request)
	// remove the specified project from the dev server
	// (DELETE /dev/projects/{projectKey})
	DeleteDevProjectsProjectKey(w http.ResponseWriter, r *http.Request, projectKey ProjectKey)
	// get the specified project and its configuration for syncing from the LaunchDarkly Service
	// (GET /dev/projects/{projectKey})
	GetDevProjectsProjectKey(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, params GetDevProjectsProjectKeyParams)
	// updates the project context or sourceEnvironmentKey
	// (PATCH /dev/projects/{projectKey})
	PatchDevProjectsProjectKey(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, params PatchDevProjectsProjectKeyParams)
	// Add the project to the dev server
	// (POST /dev/projects/{projectKey})
	PostDevProjectsProjectKey(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, params PostDevProjectsProjectKeyParams)
	// remove override for flag
	// (DELETE /dev/projects/{projectKey}/overrides/{flagKey})
	DeleteDevProjectsProjectKeyOverridesFlagKey(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, flagKey FlagKey)
	// override flag value with value provided in the body
	// (PUT /dev/projects/{projectKey}/overrides/{flagKey})
	PutDevProjectsProjectKeyOverridesFlagKey(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, flagKey FlagKey)
	// updates the flag state for the given project and source environment
	// (PATCH /dev/projects/{projectKey}/sync)
	PatchDevProjectsProjectKeySync(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, params PatchDevProjectsProjectKeySyncParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDevProjects operation middleware
func (siw *ServerInterfaceWrapper) GetDevProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDevProjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteDevProjectsProjectKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevProjectsProjectKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectKey" -------------
	var projectKey ProjectKey

	err = runtime.BindStyledParameterWithOptions("simple", "projectKey", mux.Vars(r)["projectKey"], &projectKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDevProjectsProjectKey(w, r, projectKey)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDevProjectsProjectKey operation middleware
func (siw *ServerInterfaceWrapper) GetDevProjectsProjectKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectKey" -------------
	var projectKey ProjectKey

	err = runtime.BindStyledParameterWithOptions("simple", "projectKey", mux.Vars(r)["projectKey"], &projectKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDevProjectsProjectKeyParams

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDevProjectsProjectKey(w, r, projectKey, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchDevProjectsProjectKey operation middleware
func (siw *ServerInterfaceWrapper) PatchDevProjectsProjectKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectKey" -------------
	var projectKey ProjectKey

	err = runtime.BindStyledParameterWithOptions("simple", "projectKey", mux.Vars(r)["projectKey"], &projectKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchDevProjectsProjectKeyParams

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchDevProjectsProjectKey(w, r, projectKey, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDevProjectsProjectKey operation middleware
func (siw *ServerInterfaceWrapper) PostDevProjectsProjectKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectKey" -------------
	var projectKey ProjectKey

	err = runtime.BindStyledParameterWithOptions("simple", "projectKey", mux.Vars(r)["projectKey"], &projectKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDevProjectsProjectKeyParams

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDevProjectsProjectKey(w, r, projectKey, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteDevProjectsProjectKeyOverridesFlagKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevProjectsProjectKeyOverridesFlagKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectKey" -------------
	var projectKey ProjectKey

	err = runtime.BindStyledParameterWithOptions("simple", "projectKey", mux.Vars(r)["projectKey"], &projectKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectKey", Err: err})
		return
	}

	// ------------- Path parameter "flagKey" -------------
	var flagKey FlagKey

	err = runtime.BindStyledParameterWithOptions("simple", "flagKey", mux.Vars(r)["flagKey"], &flagKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flagKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDevProjectsProjectKeyOverridesFlagKey(w, r, projectKey, flagKey)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutDevProjectsProjectKeyOverridesFlagKey operation middleware
func (siw *ServerInterfaceWrapper) PutDevProjectsProjectKeyOverridesFlagKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectKey" -------------
	var projectKey ProjectKey

	err = runtime.BindStyledParameterWithOptions("simple", "projectKey", mux.Vars(r)["projectKey"], &projectKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectKey", Err: err})
		return
	}

	// ------------- Path parameter "flagKey" -------------
	var flagKey FlagKey

	err = runtime.BindStyledParameterWithOptions("simple", "flagKey", mux.Vars(r)["flagKey"], &flagKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flagKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutDevProjectsProjectKeyOverridesFlagKey(w, r, projectKey, flagKey)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchDevProjectsProjectKeySync operation middleware
func (siw *ServerInterfaceWrapper) PatchDevProjectsProjectKeySync(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectKey" -------------
	var projectKey ProjectKey

	err = runtime.BindStyledParameterWithOptions("simple", "projectKey", mux.Vars(r)["projectKey"], &projectKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchDevProjectsProjectKeySyncParams

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchDevProjectsProjectKeySync(w, r, projectKey, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/dev/projects", wrapper.GetDevProjects).Methods("GET")

	r.HandleFunc(options.BaseURL+"/dev/projects/{projectKey}", wrapper.DeleteDevProjectsProjectKey).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/dev/projects/{projectKey}", wrapper.GetDevProjectsProjectKey).Methods("GET")

	r.HandleFunc(options.BaseURL+"/dev/projects/{projectKey}", wrapper.PatchDevProjectsProjectKey).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/dev/projects/{projectKey}", wrapper.PostDevProjectsProjectKey).Methods("POST")

	r.HandleFunc(options.BaseURL+"/dev/projects/{projectKey}/overrides/{flagKey}", wrapper.DeleteDevProjectsProjectKeyOverridesFlagKey).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/dev/projects/{projectKey}/overrides/{flagKey}", wrapper.PutDevProjectsProjectKeyOverridesFlagKey).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/dev/projects/{projectKey}/sync", wrapper.PatchDevProjectsProjectKeySync).Methods("PATCH")

	return r
}

type ErrorResponseJSONResponse struct {
	// Code specific error code encountered
	Code string `json:"code"`

	// Message description of the error
	Message string `json:"message"`
}

type FlagOverrideJSONResponse struct {
	// Override whether or not this is an overridden value or one from the source environment
	Override bool `json:"override"`

	// Value value of a feature flag variation
	Value FlagValue `json:"value"`
}

type ProjectJSONResponse Project

type GetDevProjectsRequestObject struct {
}

type GetDevProjectsResponseObject interface {
	VisitGetDevProjectsResponse(w http.ResponseWriter) error
}

type GetDevProjects200JSONResponse []string

func (response GetDevProjects200JSONResponse) VisitGetDevProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDevProjectsProjectKeyRequestObject struct {
	ProjectKey ProjectKey `json:"projectKey"`
}

type DeleteDevProjectsProjectKeyResponseObject interface {
	VisitDeleteDevProjectsProjectKeyResponse(w http.ResponseWriter) error
}

type DeleteDevProjectsProjectKey204Response struct {
}

func (response DeleteDevProjectsProjectKey204Response) VisitDeleteDevProjectsProjectKeyResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDevProjectsProjectKey404JSONResponse struct{ ErrorResponseJSONResponse }

func (response DeleteDevProjectsProjectKey404JSONResponse) VisitDeleteDevProjectsProjectKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDevProjectsProjectKeyRequestObject struct {
	ProjectKey ProjectKey `json:"projectKey"`
	Params     GetDevProjectsProjectKeyParams
}

type GetDevProjectsProjectKeyResponseObject interface {
	VisitGetDevProjectsProjectKeyResponse(w http.ResponseWriter) error
}

type GetDevProjectsProjectKey200JSONResponse struct{ ProjectJSONResponse }

func (response GetDevProjectsProjectKey200JSONResponse) VisitGetDevProjectsProjectKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDevProjectsProjectKey404Response struct {
}

func (response GetDevProjectsProjectKey404Response) VisitGetDevProjectsProjectKeyResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PatchDevProjectsProjectKeyRequestObject struct {
	ProjectKey ProjectKey `json:"projectKey"`
	Params     PatchDevProjectsProjectKeyParams
	Body       *PatchDevProjectsProjectKeyJSONRequestBody
}

type PatchDevProjectsProjectKeyResponseObject interface {
	VisitPatchDevProjectsProjectKeyResponse(w http.ResponseWriter) error
}

type PatchDevProjectsProjectKey200JSONResponse struct{ ProjectJSONResponse }

func (response PatchDevProjectsProjectKey200JSONResponse) VisitPatchDevProjectsProjectKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchDevProjectsProjectKey404Response struct {
}

func (response PatchDevProjectsProjectKey404Response) VisitPatchDevProjectsProjectKeyResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostDevProjectsProjectKeyRequestObject struct {
	ProjectKey ProjectKey `json:"projectKey"`
	Params     PostDevProjectsProjectKeyParams
	Body       *PostDevProjectsProjectKeyJSONRequestBody
}

type PostDevProjectsProjectKeyResponseObject interface {
	VisitPostDevProjectsProjectKeyResponse(w http.ResponseWriter) error
}

type PostDevProjectsProjectKey201JSONResponse struct{ ProjectJSONResponse }

func (response PostDevProjectsProjectKey201JSONResponse) VisitPostDevProjectsProjectKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostDevProjectsProjectKey400JSONResponse struct{ ErrorResponseJSONResponse }

func (response PostDevProjectsProjectKey400JSONResponse) VisitPostDevProjectsProjectKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostDevProjectsProjectKey409JSONResponse struct {
	// Code specific error code encountered
	Code string `json:"code"`

	// Message description of the error
	Message string `json:"message"`
}

func (response PostDevProjectsProjectKey409JSONResponse) VisitPostDevProjectsProjectKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDevProjectsProjectKeyOverridesFlagKeyRequestObject struct {
	ProjectKey ProjectKey `json:"projectKey"`
	FlagKey    FlagKey    `json:"flagKey"`
}

type DeleteDevProjectsProjectKeyOverridesFlagKeyResponseObject interface {
	VisitDeleteDevProjectsProjectKeyOverridesFlagKeyResponse(w http.ResponseWriter) error
}

type DeleteDevProjectsProjectKeyOverridesFlagKey204Response struct {
}

func (response DeleteDevProjectsProjectKeyOverridesFlagKey204Response) VisitDeleteDevProjectsProjectKeyOverridesFlagKeyResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDevProjectsProjectKeyOverridesFlagKey404Response struct {
}

func (response DeleteDevProjectsProjectKeyOverridesFlagKey404Response) VisitDeleteDevProjectsProjectKeyOverridesFlagKeyResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PutDevProjectsProjectKeyOverridesFlagKeyRequestObject struct {
	ProjectKey ProjectKey `json:"projectKey"`
	FlagKey    FlagKey    `json:"flagKey"`
	Body       *PutDevProjectsProjectKeyOverridesFlagKeyJSONRequestBody
}

type PutDevProjectsProjectKeyOverridesFlagKeyResponseObject interface {
	VisitPutDevProjectsProjectKeyOverridesFlagKeyResponse(w http.ResponseWriter) error
}

type PutDevProjectsProjectKeyOverridesFlagKey200JSONResponse struct{ FlagOverrideJSONResponse }

func (response PutDevProjectsProjectKeyOverridesFlagKey200JSONResponse) VisitPutDevProjectsProjectKeyOverridesFlagKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutDevProjectsProjectKeyOverridesFlagKey400JSONResponse struct{ ErrorResponseJSONResponse }

func (response PutDevProjectsProjectKeyOverridesFlagKey400JSONResponse) VisitPutDevProjectsProjectKeyOverridesFlagKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchDevProjectsProjectKeySyncRequestObject struct {
	ProjectKey ProjectKey `json:"projectKey"`
	Params     PatchDevProjectsProjectKeySyncParams
}

type PatchDevProjectsProjectKeySyncResponseObject interface {
	VisitPatchDevProjectsProjectKeySyncResponse(w http.ResponseWriter) error
}

type PatchDevProjectsProjectKeySync200JSONResponse struct{ ProjectJSONResponse }

func (response PatchDevProjectsProjectKeySync200JSONResponse) VisitPatchDevProjectsProjectKeySyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchDevProjectsProjectKeySync404Response struct {
}

func (response PatchDevProjectsProjectKeySync404Response) VisitPatchDevProjectsProjectKeySyncResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// lists all projects that have been configured for the dev server
	// (GET /dev/projects)
	GetDevProjects(ctx context.Context, request GetDevProjectsRequestObject) (GetDevProjectsResponseObject, error)
	// remove the specified project from the dev server
	// (DELETE /dev/projects/{projectKey})
	DeleteDevProjectsProjectKey(ctx context.Context, request DeleteDevProjectsProjectKeyRequestObject) (DeleteDevProjectsProjectKeyResponseObject, error)
	// get the specified project and its configuration for syncing from the LaunchDarkly Service
	// (GET /dev/projects/{projectKey})
	GetDevProjectsProjectKey(ctx context.Context, request GetDevProjectsProjectKeyRequestObject) (GetDevProjectsProjectKeyResponseObject, error)
	// updates the project context or sourceEnvironmentKey
	// (PATCH /dev/projects/{projectKey})
	PatchDevProjectsProjectKey(ctx context.Context, request PatchDevProjectsProjectKeyRequestObject) (PatchDevProjectsProjectKeyResponseObject, error)
	// Add the project to the dev server
	// (POST /dev/projects/{projectKey})
	PostDevProjectsProjectKey(ctx context.Context, request PostDevProjectsProjectKeyRequestObject) (PostDevProjectsProjectKeyResponseObject, error)
	// remove override for flag
	// (DELETE /dev/projects/{projectKey}/overrides/{flagKey})
	DeleteDevProjectsProjectKeyOverridesFlagKey(ctx context.Context, request DeleteDevProjectsProjectKeyOverridesFlagKeyRequestObject) (DeleteDevProjectsProjectKeyOverridesFlagKeyResponseObject, error)
	// override flag value with value provided in the body
	// (PUT /dev/projects/{projectKey}/overrides/{flagKey})
	PutDevProjectsProjectKeyOverridesFlagKey(ctx context.Context, request PutDevProjectsProjectKeyOverridesFlagKeyRequestObject) (PutDevProjectsProjectKeyOverridesFlagKeyResponseObject, error)
	// updates the flag state for the given project and source environment
	// (PATCH /dev/projects/{projectKey}/sync)
	PatchDevProjectsProjectKeySync(ctx context.Context, request PatchDevProjectsProjectKeySyncRequestObject) (PatchDevProjectsProjectKeySyncResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetDevProjects operation middleware
func (sh *strictHandler) GetDevProjects(w http.ResponseWriter, r *http.Request) {
	var request GetDevProjectsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDevProjects(ctx, request.(GetDevProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDevProjects")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDevProjectsResponseObject); ok {
		if err := validResponse.VisitGetDevProjectsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDevProjectsProjectKey operation middleware
func (sh *strictHandler) DeleteDevProjectsProjectKey(w http.ResponseWriter, r *http.Request, projectKey ProjectKey) {
	var request DeleteDevProjectsProjectKeyRequestObject

	request.ProjectKey = projectKey

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDevProjectsProjectKey(ctx, request.(DeleteDevProjectsProjectKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDevProjectsProjectKey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDevProjectsProjectKeyResponseObject); ok {
		if err := validResponse.VisitDeleteDevProjectsProjectKeyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDevProjectsProjectKey operation middleware
func (sh *strictHandler) GetDevProjectsProjectKey(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, params GetDevProjectsProjectKeyParams) {
	var request GetDevProjectsProjectKeyRequestObject

	request.ProjectKey = projectKey
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDevProjectsProjectKey(ctx, request.(GetDevProjectsProjectKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDevProjectsProjectKey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDevProjectsProjectKeyResponseObject); ok {
		if err := validResponse.VisitGetDevProjectsProjectKeyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchDevProjectsProjectKey operation middleware
func (sh *strictHandler) PatchDevProjectsProjectKey(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, params PatchDevProjectsProjectKeyParams) {
	var request PatchDevProjectsProjectKeyRequestObject

	request.ProjectKey = projectKey
	request.Params = params

	var body PatchDevProjectsProjectKeyJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchDevProjectsProjectKey(ctx, request.(PatchDevProjectsProjectKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchDevProjectsProjectKey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchDevProjectsProjectKeyResponseObject); ok {
		if err := validResponse.VisitPatchDevProjectsProjectKeyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostDevProjectsProjectKey operation middleware
func (sh *strictHandler) PostDevProjectsProjectKey(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, params PostDevProjectsProjectKeyParams) {
	var request PostDevProjectsProjectKeyRequestObject

	request.ProjectKey = projectKey
	request.Params = params

	var body PostDevProjectsProjectKeyJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostDevProjectsProjectKey(ctx, request.(PostDevProjectsProjectKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDevProjectsProjectKey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostDevProjectsProjectKeyResponseObject); ok {
		if err := validResponse.VisitPostDevProjectsProjectKeyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDevProjectsProjectKeyOverridesFlagKey operation middleware
func (sh *strictHandler) DeleteDevProjectsProjectKeyOverridesFlagKey(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, flagKey FlagKey) {
	var request DeleteDevProjectsProjectKeyOverridesFlagKeyRequestObject

	request.ProjectKey = projectKey
	request.FlagKey = flagKey

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDevProjectsProjectKeyOverridesFlagKey(ctx, request.(DeleteDevProjectsProjectKeyOverridesFlagKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDevProjectsProjectKeyOverridesFlagKey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDevProjectsProjectKeyOverridesFlagKeyResponseObject); ok {
		if err := validResponse.VisitDeleteDevProjectsProjectKeyOverridesFlagKeyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutDevProjectsProjectKeyOverridesFlagKey operation middleware
func (sh *strictHandler) PutDevProjectsProjectKeyOverridesFlagKey(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, flagKey FlagKey) {
	var request PutDevProjectsProjectKeyOverridesFlagKeyRequestObject

	request.ProjectKey = projectKey
	request.FlagKey = flagKey

	var body PutDevProjectsProjectKeyOverridesFlagKeyJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutDevProjectsProjectKeyOverridesFlagKey(ctx, request.(PutDevProjectsProjectKeyOverridesFlagKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutDevProjectsProjectKeyOverridesFlagKey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutDevProjectsProjectKeyOverridesFlagKeyResponseObject); ok {
		if err := validResponse.VisitPutDevProjectsProjectKeyOverridesFlagKeyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchDevProjectsProjectKeySync operation middleware
func (sh *strictHandler) PatchDevProjectsProjectKeySync(w http.ResponseWriter, r *http.Request, projectKey ProjectKey, params PatchDevProjectsProjectKeySyncParams) {
	var request PatchDevProjectsProjectKeySyncRequestObject

	request.ProjectKey = projectKey
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchDevProjectsProjectKeySync(ctx, request.(PatchDevProjectsProjectKeySyncRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchDevProjectsProjectKeySync")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchDevProjectsProjectKeySyncResponseObject); ok {
		if err := validResponse.VisitPatchDevProjectsProjectKeySyncResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
